{"name":"Vimerito Demille","tagline":"The easy to use microframework. The one under thousand.","body":"Vimerito 2.4 Demille\r\n======================\r\nVimerito Demille is a lightweight php framework for PHP.\r\n\r\n* It's easy\r\n* It's fast\r\n* Is's flexible\r\n\r\nSome features of Vimerito Demille\r\n* model-view-controller-paradigm\r\n* Authentification\r\n* MySql-databases\r\n* JavaScript-support\r\n* Assets\r\n* support for different templateengines\r\n* Layout\r\n* Session\r\n* ...\r\n\r\nHow using it\r\n---------------------\r\nCreating a controller:\r\n\r\nCreate the file my.php in the folder `app/controller` and type in\r\n```php\r\n<?php\r\nclass Controller_my{\r\n\r\n}\r\n```\r\n\r\nNow, you can write your \"actions\". Actions are methods who will be \r\npublic for the user. \"indexAction\" is the default action of \r\nevery controller. If the call the site *http://www.your-site.com/my* will \r\ncall your Controller_my-class and the indexAction.\r\n\r\n```php\r\n<?php \r\nclass Controller_my{\r\n  public function indexAction(){\r\n  \treturn 'Welcome on my new site!';\r\n  }\r\n}\r\n```\r\nNow, the user will see the text \"Welcome on my new site!\"\r\nEvery action has the suffix \"Action\".\r\n\r\nIf you want to use templates and the layout you need only an adapter for \r\nyour favourite templateengine. At the moment the default templateengine is\r\nRainTPL.\r\n```php\r\n<?php \r\nclass Controller_my{\r\n  public $layout = \"layout.php\";\r\n  public function indexAction(){\r\n  \t$view = new View(new RainTplAdapter);\r\n  \t$view->load(\"myview.php\");\r\n  \t$view->assign(\"text\", \"Welcome to my new site!\");\r\n  \tLayout::get()->add($view, \"#content\");\r\n  }\r\n}\r\n```\r\nHave you noticed the attribute `$layout`? The value of this \r\nattribute is a templatefile outgoning from the folder *app/view*.\r\nWhen we add the view to the layout we have to specify in which \r\nHTML-element the result of our view copied. This we do with a CSS-selector\r\nlike in jQuery (`#content` is an element with the id \"content\").\r\n\r\nIf you don't want to use the layout, you have to return the render-result of your\r\ntemplate.\r\n\r\n```php\r\n<?php \r\nclass Controller_my{\r\n  public function indexAction(){\r\n  \t$view = new View(new RainTplAdapter);\r\n  \t$view->load(\"myview.php\");\r\n  \t$view->assign(\"text\", \"Welcome to my new site!\");\r\n  \treturn $view-render();\r\n  }\r\n}\r\n```\r\n\r\nIf you want to use the authentification-feature you have to configure the file\r\n*boot.php*. All the configuration of your project will placed here. \r\n```php\r\n ...\r\n\t'authTable'\t=>\t'user',\r\n\t'authUsername'=>'username',\r\n\t'authPassword'=>'password',\r\n ...\r\n``` \r\n```php\r\n<?php \r\nclass Controller_my{\r\n  public $layout = \"layout.php\";\r\n  public function indexAction(){\r\n  \tif(Auth::is()){\r\n  \t  $view = new View(new RainTplAdapter);\r\n  \t  $view->load(\"myview.php\");\r\n  \t  $view->assign(\"text\", \"Welcome to my new site!\");\r\n  \t  $view->assign(\"user\", User::get(\"username\");\r\n  \t  Layout::get()->add($view, \"#content\");\r\n  \t}else{\r\n  \t  $view = new View(new RainTplAdapter);\r\n  \t  $view->load(\"myview.php\");\r\n  \t  $view->assign(\"text\", \"You are not welcome!\");\r\n  \t  Layout::get()->add($view, \"#content\");\r\n  \t}\r\n  }\r\n}\r\n```\r\nAfter the authentification you have the possibility to \r\nuse the class `User` to get all information of the user, which saved in \r\nthe databasetable.\r\n\r\nFor loging a user in use the method `Auth::login($username, md5($password))`.\r\nFor loging out use `Auth::logout()` \r\n\r\nTo bind in a JavaScript-file use `JavaScript::add($url)` and call it somewhere\r\nin your script (in the *boot.php* or in your actions) that method\r\n```php\r\n  ...\r\n  JavaScript::add(Url::asset('myscript.js'));\r\n  ...\r\n```\r\n\r\nThe class `Url` helps you to clean your code. `Url::asset` returns URLs to\r\nfiles in the folder *public* `Url::to` creates links to other controllers and actions\r\n\r\n```php\r\n  ...\r\n  Url::to(\"my@nextside\", array(\"parameter1\"=>\"value1\", \"parameter2\"=>\"value2\"));\r\n  ...\r\n```\r\nThis will create the URL:\r\nhttp://www.my-site.com/my/nextside/parameter1/value1/parameter2/value2\r\nand calls the class `Controller_my` and the action `nextsideAction`.\r\n\r\nIf you want that your site returns a JSON-ressource  use the class `Json`\r\n\r\n```php\r\n  ...\r\n  public function myjsonAction(){\r\n    $result = Array(\r\n      'parameter1' => 'value1',\r\n      'parameter2' => 'value2' \r\n    );\r\n    return Json::returnJson($result);\r\n  }\r\n  ...\r\n```\r\n\r\nSo far. If you have questions, don't be afraid: ask!\r\n\r\nPlans for the future \r\n--------------------\r\n- [ ] Add an ORM\r\n- [ ] Support for more templateengines\r\n- [ ] A more flexible output-class\r\n- [ ] A more flexible session-class\r\n\r\nWe need help. Help us to make Vimerito Demille better.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}